---
import IconMessage from "@/icons/Icon_message.astro";
import { isValidEmail } from "@/utils/emailValidation";
import { isValidPhoneNumber } from "@/utils/phonevalidator";
import { isString } from "@/utils/stringValidator";
import { MailerSend, EmailParams, Sender, Recipient } from "mailersend";
const messageInfo: { sucess: string, error: string } = { sucess: "", error: "" };
const errors: { name: string, email: string, tel: string, lastname: string } = { name: "", email: "", tel: "", lastname: "" }


if (Astro.request.method === 'POST') {
  try{
        // obteniendo datos del formulario de contacto
        const data: FormData = await Astro.request.formData();
        const name = data.get('names');
        const last_name = data.get('last_name');
        const email = data.get('email');
        const tel = data.get('tel');
        const message = data.get('message');
        const mailerSend = new MailerSend({ apiKey:'mlsn.407bb956c5b7afd1114b2e38601aaf746d60a84b82fa704be699d1a7686f56df'})
        const sentFrom = new Sender("MS_8gKf7k@trial-vywj2lp7o7kl7oqz.mlsender.net", `${name}`)
        const recipients = [ new Recipient("proyexapp@gmail.com", 'PROYEXAPP')];
    
        // validaciones del formulario
        if (typeof name !== "string" || name.length < 3 || !isString(name) || name === null) {
        errors.name += "Porfavor ingrese un nombre valido";
        }
        if (typeof email !== "string" || !isValidEmail(email)) {
        errors.email += "Email no valido";
        }
        if (typeof last_name !== "string" || last_name.length < 3) {
        errors.lastname += "Porfavor ingrese un apellido valido";
        }
        if (typeof tel !== "string" || !isValidPhoneNumber(tel)) {
        errors.tel += "Email no valido";
        }

        const hasErrors = Object.values(errors).some(mensage => mensage)
        if (!hasErrors) {
                const emailParams = new EmailParams()
                .setFrom(sentFrom)
                .setTo(recipients)
                .setSubject(`Soy ${name} ${last_name} y quiero cotizar un servicio web`)
                .setReplyTo(new Recipient(`${email}`, `${name}`))
                .setHtml(`Nombre: ${name} ${last_name} <br> Telefono: ${tel} <br> Correo: ${email} <br><br> ${message}`)
                await mailerSend.email.send(emailParams)
                messageInfo.sucess += "Mensaje enviado con exito pronto nos pondremos en contacto con usted"
                Astro.redirect('/contactanos/#mensaje')
            }
        else {
                messageInfo.error += "No se pudo enviar el mensaje. Vuelve a intentarlo"
                Astro.redirect('/contactanos/#mensaje')
            }
    }  
    catch (error) {
        console.error(error); 
    }
}

---
{messageInfo.sucess && 
    <div id="mensaje" class="mensaje mensaje-sucess"><p>{messageInfo.sucess}</p></div>
}
{messageInfo.error && 
    <div id="mensaje" class="mensaje mensaje-error"><p>{messageInfo.error}</p></div>
}
<div class="container">
    
    <form method="POST" id="formulario">
       <div class="flex-row">
            <div >
                <label for="name">Nombre<span class="required">*</span></label>
                <input   type="text" name="names" id="name" placeholder="Nombre"   required>
                {errors.name && <p class="errors">{errors.name}</p>}
                <p id="errorName" class="errors"></p>
            </div>
            <div>
                <label for="last_name">Apellido<span class="required">*</span></label>
                <input type="text" name="last_name" id="lastname" placeholder="Apellido" required>
                {errors.lastname && <p class="errors">{errors.lastname}</p>}
                <p id="errorLastName"  class="errors"></p>
            </div>
       </div>
        <div class="flex-row">
            <div>
                <label for="email">Email<span class="required">*</span></label>
                <input type="email" name="email" id="email"  placeholder="name@correo.com" required>
                {errors.email && <p class="errors">{errors.email}</p>}
                <p id="errorEmail"  class="errors"></p>
            </div>
            <div>
                <label for="tel">Telefono<span class="required">*</span></label>
                <input type="tel"  name="tel" id="tel"  placeholder="(Código de área) Número" required>
                {errors.tel && <p class="errors">{errors.tel}</p>}
                <p id="errorTel"  class="errors"></p>
            </div>
        </div>
        <div class="sm">
            <label for="message">Escribenos<span class="required">*</span></label>
            <textarea  name="message" id="message" rows="7"   placeholder="Escribenos..."></textarea>
        </div>
        <div class="button">
            <button type="submit">
                <IconMessage color="var(--color_primario)" width="24" height="24"/>
                Enviar mensaje</button>
        </div>
       
    </form>
</div>


<style>
    .required {
        color: red;
    }

    .errors {
        color:var(--color_alert);
        font-weight: 400;
    }
    .mensaje-error {
        background-color:var(--color_alert_fondo);
        color: var(--color_alert);
        border: 1.2px solid #f5c2c7;
    }
    .mensaje-sucess {
        background-color: var( --color_success_fondo);
        color:var(--color_success);
        border:1.2px solid #badbcc;
    }
    .mensaje {
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        width: 100%;
        height: 5rem;
        border-radius:var(--border-radius);
        font-size: 2rem;
        text-transform: uppercase;
        text-align: center;
        padding: 1rem;
    }
.container {
    width: 100%;
    margin-top: 2rem;
    padding: 1rem;
    background-color: var(--color_primario);
    border-radius: var(--border-radius);
    box-shadow: var(--sombra_caja_2);
}
.flex-row {
    width: 100%;
    display: flex;
    flex-direction: column;
}
form {
    width: 100%;
}
form  div label {
    text-align: left;
    display: block; 
    margin-bottom: 0.5rem; 
    margin-top: 1rem;
    font-size: 1.3rem;
    line-height: 1.25rem; 
    color: var(--color_terciario); 
}
form .flex-row div {
    width: 100%;
}
form .flex-row div input {
	display: block; 
	padding: 1rem; 
	border-radius: 0.5rem; 
	border:1px solid #D1D5DB; 
	width: 100%; 
	font-size:1rem;
	line-height: 1.25rem; 
	box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05); 
}
form .flex-row div input.input-error {
    border: 2px solid red;
}

form .sm textarea {
	display: block; 
	padding: 0.625rem; 
	border-radius: 0.5rem; 
	border:1px solid #D1D5DB; 
    width: 100%;
	font-size: 1rem;
	line-height: 1.25rem; 
	background-color: #F9FAFB; 
	box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05); 
	resize: none;
}
form .button {
    display: flex;
    justify-content: flex-end;
}
form button {
display: flex;
align-items: center;
gap: .7rem;
margin-top: .8rem;
padding-top: 0.75rem;
padding-bottom: 0.75rem; 
padding-left: 1.25rem;
padding-right: 1.25rem; 
border-radius: 0.5rem; 
font-size: 0.875rem;
line-height: 1.25rem; 
font-weight: 500; 
text-align: center; 
border: 0;
background-color: var(--color_terciario);
color: var(--color_primario); 
cursor: pointer;
}
@media (max-width: 576px) {
    form button { 
        width: 100%;
        justify-content: center;
    }
}
form button:hover {
    background-color: var(--color_secundario);
}


@media (min-width: 576px) {
}
/* Medium devices (tablets, 768px and up) */
@media (min-width: 768px) {
    
}
@media (min-width: 1200px) {
    .mensaje {
        width: 50vw 
    }
    .container {
        width: 50vw;
        padding: 2rem
    }
    .flex-row {
        flex-direction:row;
        gap:1rem
    }
    form .button {
    display: flex;
    justify-content: flex-end;
}
}
</style>

<script>
    import { isValidEmail } from "@/utils/emailValidation";
import { isValidPhoneNumber } from "@/utils/phonevalidator";
    import { isString } from "@/utils/stringValidator";

    // Validacion Formulario front
    const nameInput = (document.getElementById('name') as HTMLInputElement)
    const lastnameInput = (document.getElementById('lastname') as HTMLInputElement)
    const emailInput = (document.getElementById('email') as HTMLInputElement)
    const message = (document.getElementById('message') as HTMLTextAreaElement)
    const phoneInput = (document.getElementById('tel') as HTMLInputElement)
    
    nameInput.addEventListener('focusout', () => validateName())
    lastnameInput.addEventListener('focusout', () => validateLastName())
    emailInput.addEventListener('focusout', () =>  validateEmail())
    phoneInput.addEventListener('focusout', () =>  validateNumber())

    const  validateName = ():boolean => {
        const name = (document.getElementById('name') as HTMLInputElement).value;
        if (name.length < 3 )  {
            showError('errorName', "El nombre debe tener al menos 3 caracteres." , "name");
            return false;

        }   else if (!isString(name)) {
            showError('errorName', "El nombre no debe contener números ni caracteres especiales." ,"name")
            return false;
        }
        clearError('errorName' , "name")
        return true;
    }

    const  validateLastName = ():boolean => {
        const lastname = (document.getElementById('lastname') as HTMLInputElement).value;
        if (lastname.length < 3 )  {
            showError('errorLastName', "El Apellido debe tener al menos 3 caracteres." , "lastname");
            return false;

        }   else if (!isString(lastname)) {
            showError('errorLastName', "El Apellido no debe contener números ni caracteres especiales." , "lastname")
            return false;
        }
        clearError('errorLastName' , "lastname")
        return true;
    }

    const validateEmail = ():boolean  => {
        const email = (document.getElementById('email') as HTMLInputElement).value;
    
        if (!isValidEmail(email)) {
            showError('errorEmail', "Por favor, introduce un correo electrónico válido." , "email");
            return false;
        }
        clearError('errorEmail' , "email");
        return true;
    }

    const validateNumber = ():boolean  => {
        const phone = (document.getElementById('tel') as HTMLInputElement).value;
    
        if (!isValidPhoneNumber(phone)) {
            showError('errorTel', "Por favor, introduce un numero válido." , "tel");
            return false;
        }
        clearError('errorTel' , "tel");
        return true;
    }


    const showError = (elementId: string, errorMessage: string , inputId: string): void => {
        const errorElement = document.getElementById(elementId) as HTMLParagraphElement 
        const inputElement = document.getElementById(inputId) as HTMLInputElement
    
        if (errorElement) {
            errorElement.innerHTML = `${errorMessage}`;
        }
        if(inputElement) {   
            inputElement.classList.add('input-error')
        }
    }

    const clearError = (elementId: string ,  inputId: string): void  => {
            const errorElement = document.getElementById(elementId) as HTMLSpanElement;
            const inputElement = document.getElementById(inputId) as HTMLInputElement

            if (errorElement) {
                errorElement.innerHTML = '';
            }
            if(inputElement) {   
            inputElement.classList.remove('input-error')
        }
           
    }
</script>